#!/usr/bin/env zsh
# -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (c) 2018 Enrico M. Crisostomo
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
setopt local_options
setopt local_traps
unsetopt glob_subst
unsetopt bash_rematch

set -o errexit
set -o nounset
set -o pipefail

PROG=${0}
PROGNAME=${0:t}
PROGDIR=${0:h}
BUG_REPORT=@PACKAGE_BUGREPORT@
PACKAGE_VERSION=@PACKAGE_VERSION@
BODY_TEMPLATES_DIR=@pkgdatadir@/body-templates

typeset -r gh_netrc=~/.netrc
typeset -r gh_api_host=api.github.com
typeset -r gh_api_base_url=https://${gh_api_host}

# getopts
typeset -a filter_flag
typeset -a help_flag
typeset -a issue_id_flag
typeset -a max_pages_flag
typeset -a new_owner_name_flag
typeset -a org_flag
typeset -a repo_flag
typeset -a owner_flag
typeset -a verbose_flag
typeset -a version_flag

# json field types
typeset -A body_args
typeset -A body_field_type
body_field_type+=( has_issues   bool )
body_field_type+=( has_projects bool )
body_field_type+=( has_wiki     bool )
body_field_type+=( name         string )
body_field_type+=( names        array )
body_field_type+=( new_owner    string )
body_field_type+=( private      bool )
body_field_type+=( team_id      array )

# Curl configuration
typeset -a curl_headers
typeset -a curl_extra_headers
curl_headers+=( -H "Accept: application/vnd.github.v3+json" )
curl_headers+=( -H "Accept: application/vnd.github.jean-grey-preview+json" )
curl_headers+=( -H "Accept: application/vnd.github.mercy-preview+json" )
curl_headers+=( -H "Accept: application/vnd.github.nightshade-preview+json" )
curl_headers+=( -H "User-Agent: github-api-client" )
typeset -a curl_qs_parameters
typeset -a curl_options
typeset -r curl_full_header_file=$(mktemp)
typeset -r curl_full_response_file=$(mktemp)
typeset -r curl_last_header_file=$(mktemp)
typeset -r curl_last_response_file=$(mktemp)
typeset -a curl_options
curl_options=( -s -S -L --netrc-optional --xattr -w %{http_code} -o ${curl_last_response_file} -D ${curl_last_header_file} )
typeset -a curl_cmd
curl_cmd=( curl ${curl_options} )

# pagination
typeset -i gh_max_pages=3
gh_link_next=

# Output verbosity and logging
exec 4>/dev/null
exec 5>/dev/null

function gh_log()
{
  local log_level=${1:?Log level is required.}
  local log_message=${2:?Log message is required.}
  : ${log_levels[(i)${log_level}]:?Log level not found.}
  local log_fd=${log_levels[${log_level}]}

  printf -- "%s: %s\n" ${log_level} ${log_message} 1>&${log_fd}
}

function gh_debug()
{
  gh_log debug $*
}

typeset -A log_levels=(info 4 debug 5)

# cleanup trap
trap '__trap' INT TERM EXIT

function __trap()
{
  local exit_code=$?
  trap - EXIT
  exec 4>&-
  exec 5>&-
  rm -f ${curl_full_header_file}
  rm -f ${curl_full_response_file}
  rm -f ${curl_last_header_file}
  rm -f ${curl_last_response_file}

  exit ${exit_code}
}

# Program dependencies
typeset -a REQUIRED_PROGS=( curl jq )

function gh_check_required_programs()
{
  for p in ${REQUIRED_PROGS}
  do
    command -v ${p} > /dev/null 2>&1 ||
      {
        >&2 print "Cannot find required program: ${p}"
        exit 1
      }
  done
}

function print_version()
{
  print "${PROGNAME} ${PACKAGE_VERSION}"
  print "Copyright (C) 2018 Enrico M. Crisostomo"
  print "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
  print "This is free software: you are free to change and redistribute it."
  print "There is NO WARRANTY, to the extent permitted by law."
  print
  print "Written by Enrico M. Crisostomo"

  exit 0
}

function print_command_names()
{
  cat ${PROG} | \
    grep "^function *do_" | \
    awk '{ print $2; }' | \
    sed -e 's/()//' \
        -e 's/^do_/  /' | \
    sort
}

function print_usage()
{
  print "${PROGNAME} ${PACKAGE_VERSION}"
  print
  print "Usage:"
  print "${PROGNAME} (options)* command"
  print "${PROGNAME} -h"
  print "${PROGNAME} -v"
  print
  print "Options:"
  print " -h, --help     Print this message."
  print " -v, --verbose  Print verbose output."
  print "     --version  Print the program version."
  print
  print "Available commands:"
  print
  print_command_names
  print
  print "See the man page for more information."
  print
  print "Report bugs to <https://github.com/emcrisostomo/github-api-client/issues>."
  print "${PROGNAME} home page: <https://github.com/emcrisostomo/github-api-client>."

  exit 0
}

function gh_init_default_owner()
{
  [[ -r ${gh_netrc} ]] || return

  local -a gh_netrc_section
  gh_netrc_section=( "${(f)$(awk \
                       '/^machine[[:blank:]]*'${gh_api_host}'/{flag=1;next}/^machine.*/{flag=0}flag' \
                       ${gh_netrc} | \
                  grep "^[[:blank:]]*login[[:blank:]]*" || true)}" )

  (( ${#gh_netrc_section} > 0 )) || return

  gh_owner=${gh_netrc_section[-1]# *login *}
}

function term_print()
{
  [[ ! -p /dev/stdin ]] || return

  print -- $*
}

function curl_print_last_error_message()
{
  cat ${curl_last_response_file} | >&2 jq -r
  print
}

function curl_print_response()
{
  cat ${curl_full_response_file}

  # Add a newline characters when printing on a terminal
  term_print "\n"
}

function get_link_next()
{
  # Link: headers have this format:
  #
  #   <URL>, rel=reltype; <URL>, rel=reltype;
  #
  # We first split the Link hader on ';' and then each line is split on ','.
  # URL and reltype are extracted, and Each (URL, reltype) pair is then printed
  # on a single line as:
  #
  #   reltype: URL
  #
  gh_link_next=$(
    cat ${curl_last_header_file} | \
      grep "^Link" | \
      sed -e 's/^Link: *//' |
      awk '
        BEGIN { RS=","; FS="; "; OFS=": " }
        {
          sub(/^rel="/, "", $2); sub(/"$/, "", $2)
          sub(/^ *</, "", $1); sub(/>$/, "", $1)
          print $2, $1
        }' | \
      grep "^next:" | \
      sed -e 's/^next: *//' || true)

  gh_debug "Link next: ${gh_link_next}"
}

function curl_request()
{
  (( $# == 1 )) || (( $# == 2 )) || {
    >&2 print "Invalid number of arguments: $#"
    return 1
  }

  : > ${curl_full_header_file}
  : > ${curl_full_response_file}
  : > ${curl_last_header_file}
  : > ${curl_last_response_file}

  local curl_method
  local curl_status
  local -a curl_request_options

  if (( $# == 1 ))
  then
    curl_method=GET
    gh_link_next=${1}
  else
    curl_method=${1}
    gh_link_next=${2}
  fi

  case ${curl_method} in
    DELETE) ;;
    GET) curl_request_options+=( -G ) ;;
    PATCH) ;&
    POST) ;&
    PUT)  curl_request_options+=( -d @- ) ;;
    *) >&2 print "Unexpected verb:" ${curl_method}
       return 1
  esac

  local -i current_page=0
  while [[ -n ${gh_link_next} ]] && (( ${current_page} < ${gh_max_pages} ))
  do
    gh_debug "Method: ${curl_method}, options: ${curl_request_options}, query string: ${curl_qs_parameters}, path ${gh_link_next}"
    for h in ${curl_headers}
    do
      gh_debug "Headers: ${h}"
    done

    curl_status=$(${curl_cmd} -X ${curl_method} ${curl_request_options} ${curl_qs_parameters} ${curl_headers} ${curl_extra_headers} ${gh_link_next})

    case ${curl_status} in
      20*) ;;
      4*) ;&
      5*) >&2 print "Error: ${curl_status} received."
          curl_print_last_error_message
          return 1
          ;;
      *) >&2 print "Unexpected status received:" ${curl_status}
         curl_print_last_error_message
         return 1
         ;;
    esac

    cat ${curl_last_header_file} >> ${curl_full_header_file}
    cat ${curl_last_response_file} >> ${curl_full_response_file}

    get_link_next
    # Clear query string parameters, Assuming all of them are included in the Link header
    clear_query_string_params
    current_page=$((current_page + 1))
  done
}

function allow_no_args()
{
  (( $# == 0 )) ||
    {
      >&2 print "Invalid arguments:" $*
      return 1
    }
}

function check_parameter_or_fail()
{
  local param_name=${1:?Parameter name is required.}
  local display_name=${2:-${param_name}}

  (( ${(P)+${param_name}} )) ||
     {
       >&2 print "Missing parameter: "${display_name}
       return 1
     }
}

function read_body_args()
{
  body_args=( )

  for p in $*
  do
    body_args+=( ${p%%=*} ${p#*=} )
  done
}

function check_body_arg_or_fail()
{
  local param_name=${1:?Parameter name is required.}

  [[ -n ${body_args[(I)${param_name}]} ]] ||
    {
      >&2 print "Missing argument: "${param_name}
      return 1
    }
}

function create_json_body()
{
  (( $# == 0 )) ||
    {
      >&2 print "Invalid number of arguments: $#"
      return 1
    }

  local -i counter
  local -a key_args
  local -a value_args
  local filter_string
  filter_string='.'

  for k in ${(k)body_args}
  do
    local key=${k}
    local value=${body_args[${k}]}
    local field_type=${body_field_type[${key}]-string}

    key_args+=( --arg k${counter} ${key} )

    case ${field_type} in
      string)
        value_args+="--arg"
        ;;
      array)
        value="["${value}"]"
        value_args+="--argjson"
        ;;
      *)
        value_args+="--argjson"
        ;;
    esac

    value_args+=( v${counter} "${${value#\"}%\"}" )
    filter_string+=" | .[\$k${counter}]=\$v${counter}"
    counter=$((counter + 1))
  done

  local body
  body=$(print '{}' | \
    jq \
      "${(@)key_args}" \
      "${(@)value_args}" \
      ${filter_string})

  gh_debug "JSON body: "${body}
  printf "%s\n" ${body}
}

function do_create-repo()
{
  read_body_args $*
  check_body_arg_or_fail name
  create_json_body | \
    curl_request POST ${gh_api_base_url}/user/repos
}

function do_delete-repo()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request DELETE ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}
}

function do_edit-repo()
{
  read_body_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  create_json_body | \
    curl_request POST ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}
}

function do_get-repo()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-.}"
}

function do_list-commits()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/commits
  local default_filter="{ sha: .sha, author: .commit.author, message: .commit.message }"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-languages()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/languages
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-keys[]}"
}

function do_create-issue()
{
  read_body_args $*
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  create_json_body | \
    curl_request POST ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/issues
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-.id}"
}

function do_edit-issue()
{
  read_body_args $*
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  check_parameter_or_fail gh_issue_id issue-id
  create_json_body | \
    curl_request PATCH ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/issues/${gh_issue_id}
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-.id}"
}

function do_get-issue()
{
  allow_no_args $*
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  curl_extra_headers+=( -H "Accept: application/vnd.github.squirrel-girl-preview" )
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  check_parameter_or_fail gh_issue_id issue-id
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/issues/${gh_issue_id}
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-.}"
}

function do_list-assigned-issues()
{
  read_query_args $*
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  curl_request ${gh_api_base_url}/issues
  local default_filter=".title"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-user-issues()
{
  read_query_args $*
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  curl_request ${gh_api_base_url}/user/issues
  local default_filter=".title"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-org-issues()
{
  read_query_args $*
  check_parameter_or_fail gh_organization organization
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  curl_request ${gh_api_base_url}/orgs/${gh_organization}/issues
  local default_filter=".title"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-repo-issues()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_extra_headers+=( -H "Accept: application/vnd.github.symmetra-preview+json" )
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/issues
  local default_filter="\"\(.id): \(.title)\""
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function gh_apply_json_filter()
{
  jq -r ${1} < /dev/stdin
}

function clear_query_string_params()
{
  curl_qs_parameters=( )
}

function add_query_string_arg()
{
  for arg in $*
  do
    curl_qs_parameters+=( --data-urlencode ${arg} )
  done
}

function read_query_args()
{
  clear_query_string_params

  for arg in $*
  do
    case ${arg} in
      (*=*) add_query_string_arg ${arg} ;;
      (*)
        >&2 print "Unrecognized argument: ${arg}"
        return 1
    esac
  done
}

function do_list-my-repos()
{
  read_query_args $*
  curl_request ${gh_api_base_url}/user/repos
  local default_filter=".name"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-contributors()
{
  read_query_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/contributors
  local default_filter=".login"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-notifications()
{
  allow_no_args $*
  curl_request ${gh_api_base_url}/notifications
  local default_filter="\"\(.repository.full_name): \(.subject.title)\""
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-notifications-count()
{
  allow_no_args $*
  curl_request ${gh_api_base_url}/notifications
  curl_print_response | gh_apply_json_filter ". | length"
}

function do_list-public-repos()
{
  read_query_args $*
  curl_request ${gh_api_base_url}/repositories
  local default_filter=".full_name"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-repo-issue-events()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/issues/events
  local default_filter="."
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-repo-events()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/events
  local default_filter="."
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-repo-notifications()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/notifications
  local default_filter="\"\(.repository.full_name): \(.subject.title)\""
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-repos()
{
  read_query_args $*
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/users/${gh_owner}/repos
  local default_filter=".name"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-org-repos()
{
  read_query_args $*
  check_parameter_or_fail gh_organization organization
  curl_request ${gh_api_base_url}/orgs/${gh_organization}/repos
  local default_filter=".name"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_list-repo-topics()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/topics
  local default_filter=".names[]"
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-${default_filter}}"
}

function do_list-tags()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/tags
  local default_filter=".name"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

# Preview API
#
# Requires: Accept: application/vnd.github.hellcat-preview+json
function do_list-teams()
{
  allow_no_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_extra_headers+=( -H "Accept: application/vnd.github.hellcat-preview+json" )
  curl_request ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/teams
  local default_filter=".name"
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

# Preview API
#
# Requires: Accept: application/vnd.github.nightshade-preview+json
function do_transfer-repo()
{
  read_body_args $*
  check_parameter_or_fail gh_repo repository
  check_parameter_or_fail gh_owner owner
  curl_extra_headers+=( -H "Accept: application/vnd.github.nightshade-preview+json" )
  local default_filter=".name"

  create_json_body | \
    curl_request POST ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/transfer
  curl_print_response | gh_apply_json_filter ".[] | ${gh_json_filter:-${default_filter}}"
}

function do_rate-limit()
{
  allow_no_args $*
  curl_request ${gh_api_base_url}/rate_limit
  curl_print_response | \
    jq \
      -r \
'"core remaining: \(.resources.core.remaining)
search remaining: \(.resources.search.remaining)
graphql remaining: \(.resources.graphql.remaining)"'
}

function do_replace-topics()
{
  read_body_args $*
  check_parameter_or_fail gh_owner owner
  check_parameter_or_fail gh_repo repository
  curl_extra_headers+=( -H "Accept: application/vnd.github.mercy-preview+json" )
  local default_filter=".names[]"

  create_json_body | \
    curl_request PUT ${gh_api_base_url}/repos/${gh_owner}/${gh_repo}/topics
  curl_print_response | gh_apply_json_filter "${gh_json_filter:-${default_filter}}"
}

function __main()
{
  gh_check_required_programs

  zparseopts -D -E \
             f:=filter_flag -filter:=filter_flag       \
             h=help_flag    -help=help_flag            \
                            -issue-id:=issue_id_flag   \
                            -max-pages:=max_pages_flag \
             o:=org_flag    -organization:=org_flag    \
             r:=repo_flag   -repository:=repo_flag     \
                            -owner:=owner_flag         \
             v=verbose_flag -verbose=verbose_flag      \
                            -version=version_flag

  (( ! ${#help_flag} ))    || print_usage
  (( ! ${#version_flag} )) || print_version

  gh_init_default_owner

  (( ${#filter_flag} ))         && gh_json_filter=${filter_flag[2]}
  (( ${#issue_id_flag} ))       && gh_issue_id=${issue_id_flag[2]}
  (( ${#max_pages_flag} ))      && gh_max_pages=${max_pages_flag[2]}
  (( ${#org_flag} ))            && gh_organization=${org_flag[2]}
  (( ${#repo_flag} ))           && gh_repo=${repo_flag[2]}
  (( ${#owner_flag} ))          && gh_owner=${owner_flag[2]}
  (( ${#verbose_flag} ))        && exec 5>&2

  (( $# > 0 )) ||
    {
      >&2 print "Missing argument."
      exit 2
    }

  gh_command=$1
  shift

  if ! whence -w do_${gh_command} | grep "function$" > /dev/null
  then
    >&2 print "Unknown command:" ${gh_command}
    return 1
  fi

  do_${gh_command} $*
}

# main
__main $*

# Local variables:
# coding: utf-8
# mode: sh
# eval: (sh-set-shell "zsh")
# tab-width: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# sh-indentation: 2
# End:
