#!/usr/bin/env zsh
# -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (c) 2018 Enrico M. Crisostomo
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
setopt local_options
setopt local_traps
unsetopt glob_subst
unsetopt bash_rematch

set -o errexit
set -o nounset
set -o pipefail

PROGNAME=${0:t}
PROGDIR=${0:h}
BUG_REPORT=@PACKAGE_BUGREPORT@
PACKAGE_VERSION=@PACKAGE_VERSION@
typeset -A gh_config
gh_username=
typeset -r GH_AUTH_FILE_PATH=~/.gh_api
typeset -r gh_api_base_url=https://api.github.com
typeset -a curl_headers
typeset -a curl_options
typeset -a help_flag
typeset -a org_flag
typeset -a user_flag
typeset -a verbose_flag
typeset -a version_flag

typeset -r curl_last_response_file=$(mktemp)
typeset -a curl_options
curl_options=( -s -L --xattr -w %{http_code} -o ${curl_last_response_file} )
typeset -a curl_cmd
curl_cmd=( curl ${curl_options} )

VERBOSE_PRINT=:
REQUIRED_PROGS=( curl jq )

function gac_check_required_programs()
{
  for p in ${REQUIRED_PROGS}
  do
    command -v ${p} > /dev/null 2>&1 ||
      {
        >&2 print -- Cannot find required program: ${p}
        exit 1
      }
  done
}

print_version()
{
  print -- "${PROGNAME} ${PACKAGE_VERSION}"
  print -- "Copyright (C) 2018 Enrico M. Crisostomo"
  print -- "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
  print -- "This is free software: you are free to change and redistribute it."
  print -- "There is NO WARRANTY, to the extent permitted by law."
  print
  print -- "Written by Enrico M. Crisostomo"
}

print_usage()
{
  print -- "${PROGNAME} ${PACKAGE_VERSION}"
  print
  print -- "Usage:"
  print -- "${PROGNAME} (options)* (path)*"
  print -- "${PROGNAME} -h"
  print -- "${PROGNAME} -v"
  print
  print -- "Options:"
  print -- " -h, --help     Print this message."
  print -- " -v, --verbose  Print verbose output."
  print -- "     --version  Print the program version."
  print
  print -- "See the man page for more information."
  print
  print -- "Report bugs to <https://github.com/emcrisostomo/github-api-client/issues>."
  print -- "${PROGNAME} home page: <https://github.com/emcrisostomo/github-api-client>."
}

function parse_opts()
{
  while getopts ":" opt
  do
    case $opt in
      \?)
        >&2 print -- Invalid option -${OPTARG}.
        exit 1
        ;;
    esac
  done

  ARGS_PROCESSED=$((OPTIND - 1))
}

function gh_init_config()
{
  [[ -r ${GH_AUTH_FILE_PATH} ]] || return;

  local gh_credentials_file=$(cat ${GH_AUTH_FILE_PATH} | grep -v "^[[:space:]]*#")

  for l in ${(f)gh_credentials_file}
  do
    if [[ ${l} =~ "^([[:alnum:]]+)=(.*)" ]]
    then
      gh_config+=(${match[1]} ${match[2]})
    else
      >&2 print "Invalid configuration: ${l}"
    fi
  done
}

function gh_config_has_property()
{
  (( $# == 1 )) ||
    {
      >&2 print "Invalid number of arguments: $#"
      exit 1
    }

  local property_name=$1

  gh_init_config

  if [[ -n ${gh_config[(i)${property_name}]} ]]
  then
    return 0
  else
    return 1
  fi
}

function gh_configure_credentials()
{
  local -i has_token
  local -i has_username
  local -i has_password

  gh_config_has_property "token"    && has_token=1
  gh_config_has_property "username" && has_username=1
  gh_config_has_property "password" && has_password=1

  (( ${has_username} )) && {
    gh_username=${gh_config[username]}
  }

  (( ${has_token} )) && (( ${has_password} )) &&
    {
      >&2 print "Token and password cannot be configured at the same time."
      return 1
    }

  (( ${has_token} )) &&
    {
      curl_headers+=( -H "Authorization: token ${gh_config[token]}")
    }

  (( ${has_username} && ${has_password} )) &&
    {
      curl_options+=( -u ${gh_config[username]}:${gh_config[password]} )
    }

  return 0
}

function curl_print_response()
{
  cat ${curl_last_response_file}
}

function curl_request()
{
  (( $# == 1 )) || {
    >&2 print "Invalid number of arguments: $#"
    return 1
  }

  : > ${curl_last_response_file}
  local request_path=$1
  local curl_status=$(${curl_cmd} ${curl_headers} ${request_path})

  case ${curl_status} in
    20*) return ;;
    4*) ;&
    5*) >&2 print "Error: ${curl_status} received."
        >&2 printf "Response: "
        curl_print_response
        return 1
        ;;
    *) >&2 print "Unexpected status received: ${curl_status}."
       return 1
  esac
}

function do_list-repos()
{
  curl_request ${gh_api_base_url}/users/${gh_username}/repos
  curl_print_response | jq -r '.[] | .name'
}

function do_list-my-repos()
{
  curl_request ${gh_api_base_url}/user/repos
  curl_print_response | jq -r '.[] | .name'
}

function do_list-org-repos()
{
  (( ${+gh_organization} )) ||
    {
      >&2 print "Missing parameter: organization"
      return 1
    }

  curl_request ${gh_api_base_url}/orgs/${gh_organization}/repos
  curl_print_response | jq -r '.[] | .name'
}

# main
zparseopts -D \
           h=help_flag    -help=help_flag         \
           o:=org_flag    -organization:=org_flag \
           u:=user_flag   -user:=user_flag        \
           v=verbose_flag -verbose=verbose_flag   \
                          -version=version_flag

if (( ${+help_flag[1]} > 0 ))
then
  print_usage
  exit 0
fi

if (( ${+version_flag[1]} > 0 ))
then
  print_version
  exit 0
fi

gh_configure_credentials

(( ${#org_flag} ))            && gh_organization=${org_flag[2]}
(( ${#user_flag} ))           && gh_username=${user_flag[2]}
(( ${+verbose_flag[1]} > 0 )) && VERBOSE_PRINT=print

parse_opts $* && shift ${ARGS_PROCESSED}

(( $# > 0 )) ||
  {
    >&2 print "Missing argument."
    exit 2
  }

gh_command=$1
shift

do_${gh_command} $*

# Local variables:
# coding: utf-8
# mode: sh
# eval: (sh-set-shell "zsh")
# tab-width: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# sh-indentation: 2
# End:
